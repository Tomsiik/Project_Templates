
L4_Template_Local_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000680  08000680  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000680  08000680  00010680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000684  08000684  00010684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000060  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  20000064  20000064  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005f49  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000bb1  00000000  00000000  00025f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000720  00000000  00000000  00026b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006a8  00000000  00000000  00027250  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003578  00000000  00000000  000278f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000026e9  00000000  00000000  0002ae70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002d559  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d98  00000000  00000000  0002d5d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000668 	.word	0x08000668

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	08000668 	.word	0x08000668

080001cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <HAL_IncTick+0x1c>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b05      	ldr	r3, [pc, #20]	; (80001ec <HAL_IncTick+0x20>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4413      	add	r3, r2
 80001da:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <HAL_IncTick+0x1c>)
 80001dc:	6013      	str	r3, [r2, #0]
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr
 80001e8:	20000020 	.word	0x20000020
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	691b      	ldr	r3, [r3, #16]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b02      	cmp	r3, #2
 8000204:	d122      	bne.n	800024c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	f003 0302 	and.w	r3, r3, #2
 8000210:	2b02      	cmp	r3, #2
 8000212:	d11b      	bne.n	800024c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f06f 0202 	mvn.w	r2, #2
 800021c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2201      	movs	r2, #1
 8000222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	f003 0303 	and.w	r3, r3, #3
 800022e:	2b00      	cmp	r3, #0
 8000230:	d003      	beq.n	800023a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 f905 	bl	8000442 <HAL_TIM_IC_CaptureCallback>
 8000238:	e005      	b.n	8000246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f8f7 	bl	800042e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 f908 	bl	8000456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	2b04      	cmp	r3, #4
 8000258:	d122      	bne.n	80002a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	2b04      	cmp	r3, #4
 8000266:	d11b      	bne.n	80002a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f06f 0204 	mvn.w	r2, #4
 8000270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2202      	movs	r2, #2
 8000276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000282:	2b00      	cmp	r3, #0
 8000284:	d003      	beq.n	800028e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 f8db 	bl	8000442 <HAL_TIM_IC_CaptureCallback>
 800028c:	e005      	b.n	800029a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800028e:	6878      	ldr	r0, [r7, #4]
 8000290:	f000 f8cd 	bl	800042e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f000 f8de 	bl	8000456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2200      	movs	r2, #0
 800029e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	f003 0308 	and.w	r3, r3, #8
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d122      	bne.n	80002f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	f003 0308 	and.w	r3, r3, #8
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	d11b      	bne.n	80002f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f06f 0208 	mvn.w	r2, #8
 80002c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2204      	movs	r2, #4
 80002ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	69db      	ldr	r3, [r3, #28]
 80002d2:	f003 0303 	and.w	r3, r3, #3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d003      	beq.n	80002e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f8b1 	bl	8000442 <HAL_TIM_IC_CaptureCallback>
 80002e0:	e005      	b.n	80002ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f000 f8a3 	bl	800042e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f8b4 	bl	8000456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2200      	movs	r2, #0
 80002f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f003 0310 	and.w	r3, r3, #16
 80002fe:	2b10      	cmp	r3, #16
 8000300:	d122      	bne.n	8000348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	2b10      	cmp	r3, #16
 800030e:	d11b      	bne.n	8000348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f06f 0210 	mvn.w	r2, #16
 8000318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2208      	movs	r2, #8
 800031e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800032a:	2b00      	cmp	r3, #0
 800032c:	d003      	beq.n	8000336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f000 f887 	bl	8000442 <HAL_TIM_IC_CaptureCallback>
 8000334:	e005      	b.n	8000342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 f879 	bl	800042e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f88a 	bl	8000456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2200      	movs	r2, #0
 8000346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	691b      	ldr	r3, [r3, #16]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	2b01      	cmp	r3, #1
 8000354:	d10e      	bne.n	8000374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b01      	cmp	r3, #1
 8000362:	d107      	bne.n	8000374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f06f 0201 	mvn.w	r2, #1
 800036c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800036e:	6878      	ldr	r0, [r7, #4]
 8000370:	f000 f8a3 	bl	80004ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	691b      	ldr	r3, [r3, #16]
 800037a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800037e:	2b80      	cmp	r3, #128	; 0x80
 8000380:	d10e      	bne.n	80003a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800038c:	2b80      	cmp	r3, #128	; 0x80
 800038e:	d107      	bne.n	80003a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f879 	bl	8000492 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003ae:	d10e      	bne.n	80003ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ba:	2b80      	cmp	r3, #128	; 0x80
 80003bc:	d107      	bne.n	80003ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80003c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f86c 	bl	80004a6 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d8:	2b40      	cmp	r3, #64	; 0x40
 80003da:	d10e      	bne.n	80003fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e6:	2b40      	cmp	r3, #64	; 0x40
 80003e8:	d107      	bne.n	80003fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80003f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f000 f838 	bl	800046a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	f003 0320 	and.w	r3, r3, #32
 8000404:	2b20      	cmp	r3, #32
 8000406:	d10e      	bne.n	8000426 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	2b20      	cmp	r3, #32
 8000414:	d107      	bne.n	8000426 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f06f 0220 	mvn.w	r2, #32
 800041e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 f82c 	bl	800047e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800047e:	b480      	push	{r7}
 8000480:	b083      	sub	sp, #12
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000492:	b480      	push	{r7}
 8000494:	b083      	sub	sp, #12
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b082      	sub	sp, #8
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 80004c2:	f7ff fe83 	bl	80001cc <HAL_IncTick>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <TIM6_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <TIM6_IRQHandler+0x10>)
 80004d6:	f7ff fe8b 	bl	80001f0 <HAL_TIM_IRQHandler>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000024 	.word	0x20000024

080004e4 <LL_GPIO_GetPinOutputType>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  */
__STATIC_INLINE uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(GPIOx->OTYPER, Pin) >> POSITION_VAL(Pin));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685a      	ldr	r2, [r3, #4]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	4013      	ands	r3, r2
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004fa:	68fa      	ldr	r2, [r7, #12]
 80004fc:	fa92 f2a2 	rbit	r2, r2
 8000500:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	fab2 f282 	clz	r2, r2
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	40d3      	lsrs	r3, r2
}
 800050c:	4618      	mov	r0, r3
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <main>:
#include "main.h"
#include "stm32l4xx_ll_gpio.h"


int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	LL_GPIO_GetPinOutputType(GPIOA,LL_GPIO_PIN_5);
 800051c:	2120      	movs	r1, #32
 800051e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000522:	f7ff ffdf 	bl	80004e4 <LL_GPIO_GetPinOutputType>



  while (1)
 8000526:	e7fe      	b.n	8000526 <main+0xe>

08000528 <SysTick_Handler>:




void SysTick_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0

}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <USART1_IRQHandler>:



void USART1_IRQHandler(){
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <SystemInit+0x64>)
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <SystemInit+0x64>)
 8000568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <SystemInit+0x68>)
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <SystemInit+0x68>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <SystemInit+0x68>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <SystemInit+0x68>)
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <SystemInit+0x68>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000590:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000594:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <SystemInit+0x68>)
 8000598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800059c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <SystemInit+0x68>)
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <SystemInit+0x68>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <SystemInit+0x68>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <SystemInit+0x64>)
 80005b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005b6:	609a      	str	r2, [r3, #8]
#endif
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	40021000 	.word	0x40021000

080005cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000604 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005d2:	e003      	b.n	80005dc <LoopCopyDataInit>

080005d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005da:	3104      	adds	r1, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <LoopForever+0xa>)
	ldr	r3, =_edata
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005e4:	d3f6      	bcc.n	80005d4 <CopyDataInit>
	ldr	r2, =_sbss
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005e8:	e002      	b.n	80005f0 <LoopFillZerobss>

080005ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005ec:	f842 3b04 	str.w	r3, [r2], #4

080005f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <LoopForever+0x16>)
	cmp	r2, r3
 80005f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005f4:	d3f9      	bcc.n	80005ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005f6:	f7ff ffb3 	bl	8000560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fa:	f000 f811 	bl	8000620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005fe:	f7ff ff8b 	bl	8000518 <main>

08000602 <LoopForever>:

LoopForever:
    b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000604:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000608:	08000688 	.word	0x08000688
	ldr	r0, =_sdata
 800060c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000610:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000614:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000618:	20000064 	.word	0x20000064

0800061c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_2_IRQHandler>
	...

08000620 <__libc_init_array>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	4e0d      	ldr	r6, [pc, #52]	; (8000658 <__libc_init_array+0x38>)
 8000624:	4c0d      	ldr	r4, [pc, #52]	; (800065c <__libc_init_array+0x3c>)
 8000626:	1ba4      	subs	r4, r4, r6
 8000628:	10a4      	asrs	r4, r4, #2
 800062a:	2500      	movs	r5, #0
 800062c:	42a5      	cmp	r5, r4
 800062e:	d109      	bne.n	8000644 <__libc_init_array+0x24>
 8000630:	4e0b      	ldr	r6, [pc, #44]	; (8000660 <__libc_init_array+0x40>)
 8000632:	4c0c      	ldr	r4, [pc, #48]	; (8000664 <__libc_init_array+0x44>)
 8000634:	f000 f818 	bl	8000668 <_init>
 8000638:	1ba4      	subs	r4, r4, r6
 800063a:	10a4      	asrs	r4, r4, #2
 800063c:	2500      	movs	r5, #0
 800063e:	42a5      	cmp	r5, r4
 8000640:	d105      	bne.n	800064e <__libc_init_array+0x2e>
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000648:	4798      	blx	r3
 800064a:	3501      	adds	r5, #1
 800064c:	e7ee      	b.n	800062c <__libc_init_array+0xc>
 800064e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000652:	4798      	blx	r3
 8000654:	3501      	adds	r5, #1
 8000656:	e7f2      	b.n	800063e <__libc_init_array+0x1e>
 8000658:	08000680 	.word	0x08000680
 800065c:	08000680 	.word	0x08000680
 8000660:	08000680 	.word	0x08000680
 8000664:	08000684 	.word	0x08000684

08000668 <_init>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr

08000674 <_fini>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	bf00      	nop
 8000678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	469e      	mov	lr, r3
 800067e:	4770      	bx	lr
